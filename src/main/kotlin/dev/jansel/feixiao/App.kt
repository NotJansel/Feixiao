/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.jansel.feixiao

import com.github.twitch4j.TwitchClient
import com.github.twitch4j.TwitchClientBuilder
import com.github.twitch4j.events.ChannelGoLiveEvent
import dev.jansel.feixiao.database.collections.StreamerCollection
import dev.jansel.feixiao.extensions.EventHooks
import dev.jansel.feixiao.extensions.MessageEvents
import dev.jansel.feixiao.extensions.StreamerCommand
import dev.jansel.feixiao.utils.*
import dev.kord.core.entity.channel.GuildMessageChannel
import dev.kordex.core.ExtensibleBot
import dev.kordex.data.api.DataCollection
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking

var twitchClient: TwitchClient? = null

suspend fun main() {
	val bot = ExtensibleBot(token) {
		database(true)
		dataCollectionMode = DataCollection.None
		extensions {
			add(::MessageEvents)
			add(::EventHooks)
			add(::StreamerCommand)
		}
	}
	twitchClient = TwitchClientBuilder.builder()
		.withEnableHelix(true)
		.withClientId(twitchcid)
		.withClientSecret(twitchcs)
		.build()

	twitchClient!!.eventManager.onEvent(ChannelGoLiveEvent::class.java) {
		println("${it.channel.name} went live!")
		runBlocking {
			launch {
				val streamer = StreamerCollection().getData(it.channel.name)
				val channel = bot.kordRef.getChannelOf<GuildMessageChannel>(streamer!!.servers.first().channelId)
				val role = streamer.servers.first().roleId
				if (role != null) {
					channel?.createMessage("<@&$role> ${it.channel.name} went live streaming ${it.stream.gameName}: ${it.stream.title}")
				} else {
					channel?.createMessage("${it.channel.name} went live: ${it.stream.title}")
				}
			}
		}
	}

	bot.start()
}


